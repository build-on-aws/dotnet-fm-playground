@page "/agent-playground"
@using System.Text;
@using Amazon.BedrockRuntime;
@using DotnetFMPlayground.Agent;
@using DotnetFMPlayground.Core.Models;
@using System.Text.Json;
@inject AmazonBedrockAgentRuntimeClient BedrockAgentRuntimeClient
@inject IJSRuntime JS

<MudText Typo="Typo.h3">Agent Playground</MudText>
<MudStack>
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Agent ID" @bind-Value="agentId" />
            <MudTextField Label="Agent Alias ID" @bind-Value="agentAliasId" />
        </MudCardContent>
    </MudCard>
    <EditForm @ref="editForm" Model="@userPrompt" OnSubmit="OnSubmit"  >
        <MudCard>
            <MudCardContent>

                <MudTimeline Reverse=true>
                    @foreach (var item in promptItems)
                    {
                        string label = item.Type == PromptItemType.User ? "Human" : "Assistant";
                        <MudTimelineItem>
                            <MudField Label="@label" Class="white-space-pre-line">@item.Prompt</MudField>
                        </MudTimelineItem>
                    }
                    @if (!isThinking)
                    {
                        <MudTimelineItem>
                            <MudTextField id="PromptId" Label="Human" @bind-Value="userPrompt.Prompt"/>
                        </MudTimelineItem>
                    }
                </MudTimeline>
            </MudCardContent>
            <MudCardActions>
                <MudStack Row="true" Class="flex-auto" Justify="Justify.FlexEnd">
                    <MudButton Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary" OnClick="Reset">
                        <MudIcon Class="ms-n1" Icon="@Icons.Material.Filled.Replay" Size="Size.Small"></MudIcon>
                        <MudText Class="ms-2">Reset</MudText>
                    </MudButton>
                    <MudButton Size="Size.Large" ButtonType="ButtonType.Submit" Disabled="@isThinking" Variant="Variant.Filled" Color="Color.Primary">
                        @if (isThinking)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Thinking...</MudText>
                        }
                        else
                        {
                            <MudIcon Class="ms-n1" Icon="@Icons.Material.Filled.Send" Size="Size.Small"></MudIcon>
                            <MudText Class="ms-2">Submit</MudText>
                        }
                    </MudButton>
                </MudStack>
            </MudCardActions>
        </MudCard>
    </EditForm>
    <MudCard>
        <MudCardContent>
            <MudField Id="ResponseField" Label="Response" Class="white-space-pre-line">@outputText</MudField>
        </MudCardContent>
    </MudCard>
</MudStack>
    @code {
    private string agentId = "C54LPL8X99";

    private string agentAliasId = "TSTALIASID";

    public class UserPrompt
    {
        public string Prompt { get; set; }
    }

    private UserPrompt userPrompt = new UserPrompt();

    private ICollection<PromptItem> promptItems = new List<PromptItem>();

    private bool isThinking = false;

    private string outputText;

    private Guid sessionId = new Guid();

    private EditForm editForm;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        StateHasChanged();
    }

    private async Task OnSubmit(EditContext context)
    {
        isThinking = true;
        outputText = "";

        PromptItem inputPrompt = new(PromptItemType.User, userPrompt.Prompt);
        promptItems.Add(inputPrompt);

        userPrompt.Prompt = "";

        StateHasChanged();

        PromptItem agentPrompt = new(PromptItemType.FMAnswer, "");
        promptItems.Add(agentPrompt);

        await foreach (var item in BedrockAgentRuntimeClient.InvokeAgent(agentId, agentAliasId, sessionId.ToString(), inputPrompt.Prompt))
        {
            await InvokeAsync(async () =>
            {
                outputText += " " + item;
                agentPrompt.Prompt += " " + item;
                StateHasChanged();
            });
        }

        await InvokeAsync(async () =>
        {
            isThinking = false;
            StateHasChanged();
        });

    }

    private void Reset(MouseEventArgs e)
    {
        sessionId = new Guid();
        userPrompt.Prompt = "";
        outputText = "";
        promptItems.Clear();
    }
}

