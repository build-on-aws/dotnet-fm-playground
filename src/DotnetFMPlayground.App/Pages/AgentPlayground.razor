    @page "/agent-playground"
    @using Amazon.BedrockAgent;
    @using Amazon.BedrockAgent.Model
    @using Amazon.BedrockAgentRuntime;
    @using Amazon.BedrockAgentRuntime.Model
    @using DotnetFMPlayground.Core.Models;
    @inject AmazonBedrockAgentClient BedrockAgentClient
    @inject AmazonBedrockAgentRuntimeClient BedrockAgentRuntimeClient
    @inject IJSRuntime JS

    <MudText Typo="Typo.h3">Agent Playground</MudText>
    <MudStack>
        <MudCard>
            <MudCardContent>
                <MudSelect T="AgentSummary" ToStringFunc="@selectedAgentConverter" Required="true" Value="selectedAgent" ValueChanged="OnAgentValueChanged">
                    @if (agents != null)
                    {
                        foreach (var item in agents)
                        {
                            <MudSelectItem Value="@item" />
                        }
                    }
                </MudSelect>
                <MudSelect T="AgentAliasSummary" ToStringFunc="@selectedAgentAliasConverter" Value="selectedAgentAlias" ValueChanged="OnAgentAliasValueChanged" Required="true">
                    @if (agentAliases != null)
                    {
                        foreach (var item in agentAliases)
                        {
                            <MudSelectItem Value="@item" />
                        }
                    }
                </MudSelect>
                <MudSwitch @bind-Checked="@enableTrace" Label="Enable Trace" Color="Color.Info"/>
            </MudCardContent>
        </MudCard>
        <EditForm @ref="editForm" Model="@userPrompt" OnSubmit="OnSubmit">
            <MudGrid Spacing="2" Justify="Justify.Center">
                <MudItem xs="@(enableTrace ? 6 : 12 )" Class="d-flex">
                    <MudCard Class="flex-auto" >
                        <MudCardContent>

                            <MudTimeline Reverse=true>
                                @foreach (var item in promptItems)
                                {
                                    string label = item.Type == PromptItemType.User ? "Human" : "Assistant";
                                    <MudTimelineItem>
                                        <MudField Label="@label" Class="white-space-pre-line">@item.Prompt</MudField>
                                    </MudTimelineItem>
                                }
                                @if (!isThinking)
                                {
                                    <MudTimelineItem>
                                        <MudTextField id="PromptId" Label="Human" @bind-Value="userPrompt.Prompt"/>
                                    </MudTimelineItem>
                                }
                            </MudTimeline>
                        </MudCardContent>
                        <MudCardActions>
                            <MudStack Row="true" Class="flex-auto" Justify="Justify.FlexEnd">
                                <MudButton Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary" OnClick="Reset">
                                    <MudIcon Class="ms-n1" Icon="@Icons.Material.Filled.Replay" Size="Size.Small"></MudIcon>
                                    <MudText Class="ms-2">Reset</MudText>
                                </MudButton>
                                <MudButton Size="Size.Large" ButtonType="ButtonType.Submit" Disabled="@isThinking" Variant="Variant.Filled" Color="Color.Primary">
                                    @if (isThinking)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                        <MudText Class="ms-2">Thinking...</MudText>
                                    }
                                    else
                                    {
                                        <MudIcon Class="ms-n1" Icon="@Icons.Material.Filled.Send" Size="Size.Small"></MudIcon>
                                        <MudText Class="ms-2">Submit</MudText>
                                    }
                                </MudButton>
                            </MudStack>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem hidden="@(!enableTrace)" xs="6">
                    <MudCard>
                    <MudCardContent>
                        <MudTabs ApplyEffectsToContainer="true">
                            @if (failureTraces.Count > 0)
                            {
                                <MudTabPanel Text="Failure Traces">
                                    @foreach (var item in failureTraces)
                                    {
                                        <MudText>@item.FailureReason</MudText>
                                    }
                                </MudTabPanel>
                            }
                            @if (preProcessingTraces.Count > 0)
                            {
                                <MudTabPanel Text="PreProcessing Traces">
                                    @foreach (var item in preProcessingTraces)
                                    {
                                        <MudText>@item.ModelInvocationOutput.ParsedResponse.IsValid</MudText>
                                        <br/>
                                        <MudText>@item.ModelInvocationOutput.ParsedResponse.Rationale</MudText>
                                    }
                                </MudTabPanel>
                            }
                            @if (orchestrationTraces.Count > 0)
                            {
                                <MudTabPanel Text="Orchestration Traces">
                                    <MudExpansionPanels >
                                    @foreach (var item in orchestrationTraces)
                                    {
                                        if (item.Rationale != null)
                                        {
                                            <MudExpansionPanel Text="Rationale">
                                                <MudCard>
                                                    <MudCardHeader>
                                                        Rationale
                                                    </MudCardHeader>
                                                    <MudCardContent>
                                                        <MudText>
                                                            @item.Rationale.Text
                                                        </MudText>
                                                    </MudCardContent>
                                                    <MudCardActions>
                                                        <MudText>TraceId: @item.Rationale.TraceId</MudText>
                                                    </MudCardActions>
                                                </MudCard>
                                            </MudExpansionPanel>
                                        }

                                        if (item.Observation != null)
                                        {
                                            <MudExpansionPanel Text="Observations">
                                                <MudCard >
                                                    <MudCardHeader>
                                                        @item.Observation.Type
                                                    </MudCardHeader>
                                                    <MudCardContent>
                                                        @if (item.Observation.FinalResponse != null)
                                                        {
                                                            <MudText>
                                                                @item.Observation.FinalResponse.Text
                                                            </MudText>
                                                        }
                                                        @if (item.Observation.KnowledgeBaseLookupOutput != null)
                                                        {
                                                            <MudGrid Spacing="2" Justify="Justify.Center">
                                                                @foreach (var retrievedReference in item.Observation.KnowledgeBaseLookupOutput.RetrievedReferences)
                                                                {
                                                                    <MudItem Class="d-flex">
                                                                        <MudCard >
                                                                            <MudCardHeader>
                                                                                @retrievedReference.Location.Type - @retrievedReference.Location.S3Location.Uri
                                                                            </MudCardHeader>
                                                                            <MudCardContent>
                                                                                @retrievedReference.Content.Text
                                                                            </MudCardContent>
                                                                        </MudCard>
                                                                    </MudItem>
                                                                }
                                                            </MudGrid>
                                                        }
                                                        @if (item.Observation.ActionGroupInvocationOutput != null)
                                                        {
                                                            <MudText>
                                                                @item.Observation.ActionGroupInvocationOutput.Text
                                                            </MudText>
                                                        }
                                                        @if (item.Observation.RepromptResponse != null)
                                                        {
                                                            <MudCard>
                                                                <MudCardHeader>
                                                                    @item.Observation.RepromptResponse.Source.Value
                                                                </MudCardHeader>
                                                                <MudCardContent>
                                                                    @item.Observation.RepromptResponse.Text
                                                                </MudCardContent>
                                                            </MudCard>
                                                        }
                                                </MudCardContent>
                                                <MudCardActions>
                                                    <MudText>TraceId: @item.Observation.TraceId</MudText>
                                                </MudCardActions>
                                            </MudCard>
                                            </MudExpansionPanel>
                                        }

                                        if (item.InvocationInput != null)
                                        {
                                            <MudExpansionPanel Text="Invocation Input">
                                                <MudCard>
                                                    <MudCardHeader>
                                                        @item.InvocationInput.InvocationType.Value
                                                    </MudCardHeader>
                                                    <MudCardContent>
                                                        @if (item.InvocationInput.KnowledgeBaseLookupInput != null)
                                                        {
                                                            <MudField Label="KnowledgeBase Id">@item.InvocationInput.KnowledgeBaseLookupInput.KnowledgeBaseId</MudField>
                                                            <MudField Label="KnowledgeBase Query">@item.InvocationInput.KnowledgeBaseLookupInput.Text</MudField>
                                                        }
                                                    </MudCardContent>
                                                    <MudCardActions>
                                                        <MudText>TraceId: @item.InvocationInput.TraceId</MudText>
                                                    </MudCardActions>
                                                </MudCard>
                                            </MudExpansionPanel>
                                        }

                                        if (item.ModelInvocationInput != null)
                                        {
                                            <MudExpansionPanel Text="Model Invocation Input">
                                                <MudCard>
                                                    <MudCardHeader>
                                                        @item.ModelInvocationInput.Type.Value
                                                    </MudCardHeader>
                                                    <MudCardContent>
                                                        <MudText>
                                                            @item.ModelInvocationInput.Text
                                                        </MudText>
                                                    </MudCardContent>
                                                    <MudCardActions>
                                                        <MudText>TraceId: @item.ModelInvocationInput.TraceId</MudText>
                                                    </MudCardActions>
                                                </MudCard>
                                            </MudExpansionPanel>
                                        }
                                    }
                                    </MudExpansionPanels>
                                </MudTabPanel>
                            }
                            @if (postProcessingTraces.Count > 0)
                            {
                                <MudTabPanel Text="PostProcessing Traces">
                                    @foreach (var item in postProcessingTraces)
                                    {
                                        <MudText>@item.ModelInvocationOutput.ParsedResponse.Text</MudText>
                                    }
                                </MudTabPanel>
                            }
                        </MudTabs>
                    </MudCardContent>
                </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudStack>
    @code {

        private AgentSummary selectedAgent;
        
        Func<AgentSummary, string> selectedAgentConverter = agts => agts == null ? "" : String.Concat(agts?.AgentName, " (", agts?.AgentId, ")");

        private IEnumerable<AgentSummary> agents;
        
        private AgentAliasSummary selectedAgentAlias;

        private IEnumerable<AgentAliasSummary> agentAliases;
        
        Func<AgentAliasSummary, string> selectedAgentAliasConverter = agentAlias => agentAlias == null ? "" : String.Concat(agentAlias?.AgentAliasName, " (", agentAlias?.AgentAliasId, ")");
        
        public class UserPrompt
        {
            public string Prompt { get; set; }
        }

        private UserPrompt userPrompt = new UserPrompt();

        private ICollection<PromptItem> promptItems = new List<PromptItem>();

        private bool isThinking = false;

        private Guid sessionId = Guid.NewGuid();

        private EditForm editForm;

        private List<FailureTrace> failureTraces = new();
        private List<PreProcessingTrace> preProcessingTraces = new();
        private List<OrchestrationTrace> orchestrationTraces = new();
        private List<PostProcessingTrace> postProcessingTraces = new();

        private bool enableTrace = false;


        protected override async Task OnInitializedAsync()
        {
            await base.OnInitializedAsync();

            var agentList = await BedrockAgentClient.ListAgentsAsync(new ListAgentsRequest());
            agents = agentList.AgentSummaries;
            selectedAgent = agents.FirstOrDefault();
            if (selectedAgent != null)
            {
                var agentAliasList = await BedrockAgentClient.ListAgentAliasesAsync(new ListAgentAliasesRequest()
                {
                    AgentId = selectedAgent.AgentId
                });
                agentAliases = agentAliasList.AgentAliasSummaries;
                selectedAgentAlias = agentAliases.FirstOrDefault();
            }
        }
        
        private async Task OnSubmit(EditContext context)
        {
            isThinking = true;

            PromptItem inputPrompt = new(PromptItemType.User, userPrompt.Prompt);
            promptItems.Add(inputPrompt);

            userPrompt.Prompt = "";
            ResetTraces();
            
            StateHasChanged();

            PromptItem agentPrompt = new(PromptItemType.FMAnswer, "");
            promptItems.Add(agentPrompt);

            var response = await BedrockAgentRuntimeClient.InvokeAgentAsync(new InvokeAgentRequest()
            {
                AgentId = selectedAgent.AgentId,
                AgentAliasId = selectedAgentAlias.AgentAliasId,
                SessionId = sessionId.ToString(),
                InputText = inputPrompt.Prompt,
                EnableTrace = enableTrace
            });

            foreach (var item in response.Completion)
            {
                switch (item)
                {
                    case PayloadPart part:
                    {
                        var payload = await new StreamReader(part.Bytes).ReadToEndAsync();
                        agentPrompt.Prompt += " " + payload;
                        break;
                    }
                    case TracePart part:
                    {
                        if (part.Trace.FailureTrace != null)
                        {
                            failureTraces.Add(part.Trace.FailureTrace);
                        }
                        else if (part.Trace.PreProcessingTrace != null)
                        {
                            preProcessingTraces.Add(part.Trace.PreProcessingTrace);
                        }
                        else if (part.Trace.OrchestrationTrace != null)
                        {
                            orchestrationTraces.Add((part.Trace.OrchestrationTrace));
                        }
                        else if (part.Trace.PostProcessingTrace != null)
                        {
                            postProcessingTraces.Add((part.Trace.PostProcessingTrace));
                        }
                        break;   
                    }
                }
                StateHasChanged();
            }

            isThinking = false;
            
        }

        private void Reset(MouseEventArgs e)
        {
            sessionId = Guid.NewGuid();
            userPrompt.Prompt = "";
            promptItems.Clear();
            ResetTraces();
        }

        private void ResetTraces()
        {
            
            failureTraces.Clear();
            preProcessingTraces.Clear();
            orchestrationTraces.Clear();
            postProcessingTraces.Clear();
        }
        
        private async Task OnAgentValueChanged(AgentSummary agent)
        {
            selectedAgent = agent;
            selectedAgentAlias = null;
            
            var response = await BedrockAgentClient.ListAgentAliasesAsync(new ListAgentAliasesRequest()
            {
                AgentId = selectedAgent.AgentId
            });
            agentAliases = response.AgentAliasSummaries;
            selectedAgentAlias = agentAliases.FirstOrDefault();
        }

        private void OnAgentAliasValueChanged(AgentAliasSummary agentAlias)
        {
            selectedAgentAlias = agentAlias;
        }

    }

