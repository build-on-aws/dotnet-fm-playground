@page "/image-playground"
@using Amazon.Bedrock.Model;
@using System.Text;
@using Amazon.Bedrock;
@using Amazon.BedrockRuntime;
@using DotnetFMPlayground.App.Components
@using Rockhead.Extensions;
@using Rockhead.Extensions.Amazon;
@using Rockhead.Extensions.StabilityAI;
@using DotnetFMPlayground.Core.Models;
@inject AmazonBedrockRuntimeClient BedrockRuntimeClient
@inject AmazonBedrockClient BedrockClient
@inject IJSRuntime JS

<MudText Typo="Typo.h3">Image Playground</MudText>
<MudStack>
<ModelConfigurator OutputModality="IMAGE" @ref="_modelConfigurator" OnModelChanged="OnSelectedModelChanged"></ModelConfigurator>
<EditForm Model="@userPrompt" OnSubmit="OnSubmit">
    <MudCard>
        <MudCardContent>
            <MudTextField Counter=0 id="PromptId" Label="Prompt" @bind-Value="userPrompt.Prompt" Lines=5 Variant="Variant.Outlined" />
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>
@if (imageSrc != String.Empty)
{
    <MudPaper id="ImageId" Class="d-flex justify-center">
        <MudImage Class="pa-4" Src="@imageSrc"></MudImage>
    </MudPaper>
}
</MudStack>

@code {
    public class UserPrompt
    {
        public string Prompt { get; set; }
    }

    private UserPrompt userPrompt = new UserPrompt();

    private ModelConfigurator _modelConfigurator;

    private Model _model;

    private void OnSelectedModelChanged(Model model)
    {
        _model = model;
        imageSrc = string.Empty;
    }

    private string imageSrc = "";

    private async Task OnSubmit(EditContext context)
    {

        Prompt prompt =
        [
            new PromptItem(PromptItemType.User, userPrompt.Prompt)
        ];

        if(_model is Model.TitanImageGeneratorV1)
        {
            var response = await BedrockRuntimeClient.InvokeTitanImageGeneratorG1ForTextToImageAsync(new TitanImageTextToImageParams()
            {
                    Text = new StringBuilder().AppendJoin(' ', prompt.Select(x => x.Prompt)).ToString()
            });
            imageSrc = $"data:image/jpeg;base64,{(object)response?.Images?.FirstOrDefault()}";
        }
        else if(_model is Model.StableDiffusionXl)
        {
            var response = await BedrockRuntimeClient.InvokeStableDiffusionXlForTextToImageAsync((Model.StableDiffusionXl)_model, new StableDiffusionTextToImageParams()
                {
                    TextPrompts = new StableDiffusionTextToImageParams.TextPrompt[] { new StableDiffusionTextToImageParams.TextPrompt() { Text = new StringBuilder().AppendJoin(' ', prompt.Select(x => x.Prompt)).ToString() } }
                }); 
            imageSrc = $"data:image/jpeg;base64,{(object)response?.Artifacts?.FirstOrDefault()?.Base64}";
        }
        StateHasChanged();
        await JS.InvokeVoidAsync("scrollToElement", "ImageId");
    }
}
