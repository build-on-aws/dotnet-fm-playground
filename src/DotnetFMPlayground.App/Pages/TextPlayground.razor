@page "/text-playground"
@using System.Text;
@using Amazon.BedrockRuntime;
@using Amazon.Bedrock;
@using Amazon.Bedrock.Model;
@using Rockhead.Extensions;
@using System.Text.Json;
@using DotnetFMPlayground.Core.Models;
@inject AmazonBedrockRuntimeClient BedrockRuntimeClient
@inject AmazonBedrockClient BedrockClient
@inject IJSRuntime JS

<MudText Typo="Typo.h3">Text Playground</MudText>
<MudStack>
    <MudCard>
        <MudCardContent>
            <MudSelect T="FoundationModelSummary" @bind-Value="selectedModel" ToStringFunc="@selectConverter" Required="true">
                @if (foundationModels != null)
                {
                    foreach (var item in foundationModels)
                    {
                        selectedModel ??= item;
                        <MudSelectItem Value="@item" />
                    }
                }
            </MudSelect>
        </MudCardContent>
    </MudCard>
    <EditForm Model="@userPrompt" OnSubmit="OnSubmit">
        <MudCard>
            <MudCardContent>
                <MudTextField Counter=0 id="PromptId" Label="Prompt" @bind-Value="userPrompt.Prompt" Lines=5 Variant="Variant.Outlined" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
    <MudCard>
        <MudCardContent>
            <MudField Id="ResponseField" Label="Response" Class="white-space-pre-line">@outputText</MudField>
        </MudCardContent>
    </MudCard>
</MudStack>
@code {

    public class UserPrompt
    {
        public string Prompt { get; set; }
    }

    private IEnumerable<FoundationModelSummary> foundationModels;

    private FoundationModelSummary selectedModel;

    private UserPrompt userPrompt = new UserPrompt();

    private string outputText;

    Func<FoundationModelSummary, string> selectConverter = fms => fms == null ? "" : String.Concat(fms?.ModelName, " (", fms?.ModelId, ")");

    protected override async Task OnInitializedAsync()
    {

        foundationModels = (await BedrockClient.ListFoundationModelsAsync(new ListFoundationModelsRequest())).ModelSummaries.Where(x => x.OutputModalities.Contains("TEXT") && Model.IsSupported(x.ModelId));
        await base.OnInitializedAsync();
        StateHasChanged();
    }

    private async Task OnSubmit(EditContext context)
    {
        Prompt prompt = new();
        prompt.Add(new PromptItem(PromptItemType.User, userPrompt.Prompt));

        try
        {
            Model model = Model.Parse(selectedModel.ModelId);
            IFoundationModelResponse? response = null;
            if (model is Model.TitanText)
            {
                response = await BedrockRuntimeClient.InvokeTitanTextG1Async((Model.TitanText)model, new StringBuilder().AppendJoin(' ', prompt.Select(x => x.Prompt)).ToString());
            }
            else if(model is Model.Jurassic2)
            {
                response = await BedrockRuntimeClient.InvokeJurassic2Async((Model.Jurassic2)model, new StringBuilder().AppendJoin(' ', prompt.Select(x => x.Prompt)).ToString());
            }
            else if(model is Model.Claude)
            {
                response = await BedrockRuntimeClient.InvokeClaudeAsync((Model.Claude)model, new StringBuilder().AppendJoin(' ', prompt.Select(x => x.Prompt)).ToString());
            }
            else if(model is Model.CommandText)
            {
                response = await BedrockRuntimeClient.InvokeCommandV14Async((Model.CommandText)model, new StringBuilder().AppendJoin(' ', prompt.Select(x => x.Prompt)).ToString());
            }
            else if(model is Model.Llama)
            {
                response = await BedrockRuntimeClient.InvokeLlamaAsync((Model.Llama)model, new StringBuilder().AppendJoin(' ', prompt.Select(x => x.Prompt)).ToString());
            }
            else if(model is Model.Mistral)
            {
                response = await BedrockRuntimeClient.InvokeMistralAsync((Model.Mistral)model, new StringBuilder().AppendJoin(' ', prompt.Select(x => x.Prompt)).ToString());
            }
            outputText = response?.GetResponse();
            StateHasChanged();
        }
        catch (Exception e)
        {
            outputText = e.Message;
            StateHasChanged();
        }
    }

    private async Task ChunkReceived(string? chunk)
    {
        await InvokeAsync(async () =>
        {
            outputText += chunk;
            StateHasChanged();
            await JS.InvokeVoidAsync("scrollToElement", "ResponseField");
        });
    }

    private async Task ExceptionReceived(string? message)
    {
        System.Diagnostics.Debug.WriteLine("ExceptionReceived");
        await InvokeAsync(() =>
        {
            outputText += message;
            StateHasChanged();
        });
    }
}

