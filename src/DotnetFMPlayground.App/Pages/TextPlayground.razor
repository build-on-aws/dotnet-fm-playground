@page "/text-playground"
@using System.Text;
@using Amazon.BedrockRuntime;
@using Amazon.Bedrock;
@using Amazon.Bedrock.Model;
@using Rockhead.Extensions;
@using System.Text.Json;
@using DotnetFMPlayground.Core.Models;
@using Rockhead.Extensions.Amazon;
@using Rockhead.Extensions.Anthropic;
@using Rockhead.Extensions.AI21Labs;
@using Rockhead.Extensions.Cohere;
@using Rockhead.Extensions.Meta;
@using Rockhead.Extensions.MistralAI;
@using DotnetFMPlayground.App.Components;
@inject AmazonBedrockRuntimeClient BedrockRuntimeClient;
@inject AmazonBedrockClient BedrockClient;
@inject IJSRuntime JS;

<MudText Typo="Typo.h3">Text Playground</MudText>
<MudStack>
    <ModelConfigurator OutputModality="TEXT" @ref="_modelConfigurator" OnAddPromptFormat="OnAddPromptFormat" OnModelChanged="OnSelectedModelChanged" OnStreamingChanged="OnStreamingChanged" OnMessagesAPIChanged="OnMessagesAPIChanged"></ModelConfigurator>
    <EditForm Model="@userPrompt" OnSubmit="OnSubmit">
        <MudCard>
            <MudCardContent>
                <MudTextField Counter=0 id="PromptId" Label="Prompt" @bind-Value="userPrompt.Prompt" Lines=5 Variant="Variant.Outlined" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
    <MudCard>
        <MudCardContent>
            <MudField Id="ResponseField" Label="Response" Class="white-space-pre-line">@outputText</MudField>
        </MudCardContent>
    </MudCard>
</MudStack>
@code {

    public class UserPrompt
    {
        public string Prompt { get; set; }
    }

    private ModelConfigurator _modelConfigurator;

    private Model _model;

    private UserPrompt userPrompt = new UserPrompt();

    private string outputText;

    private bool _streaming = false;

    private bool _messagesAPI = false;

    private void OnSelectedModelChanged(Model model)
    {
        _model = model;
        outputText = string.Empty;
    }

    private void OnStreamingChanged(bool value)
    {
        _streaming = value;
    }

    private void OnMessagesAPIChanged(bool value)
    {
        _messagesAPI = value;
    }

    private void OnAddPromptFormat(string value)
    {
        userPrompt.Prompt = value;
    }

    private async Task OnSubmit(EditContext context)
    {
        outputText = string.Empty;
        Prompt prompt = new();
        prompt.Add(new PromptItem(PromptItemType.User, userPrompt.Prompt));

        try
        {
            if(_model.StreamingSupported && _streaming)
            {
                await foreach(var chunk in InvokeModelWithStreamingAsync(prompt))
                {
                    outputText += chunk;
                    StateHasChanged();
                    await JS.InvokeVoidAsync("scrollToElement", "ResponseField");
                }
            }
            else
            {
                outputText = await InvokeModelAsync(prompt);
                StateHasChanged();
                await JS.InvokeVoidAsync("scrollToElement", "ResponseField");
            }
        }
        catch (Exception e)
        {
            outputText = e.Message;
            StateHasChanged();
        }
    }

    private async Task<string?> InvokeModelAsync(Prompt prompt)
    {
        IFoundationModelResponse? response = null;
        string textPrompt = new StringBuilder().AppendJoin(' ', prompt.Select(x => x.Prompt)).ToString();
        if (_model is Model.TitanText)
        {
            response = await BedrockRuntimeClient.InvokeTitanTextG1Async((Model.TitanText)_model, textPrompt, _modelConfigurator?.GetTitanTextGenerationConfig());
        }
        else if (_model is Model.Jurassic2)
        {
            response = await BedrockRuntimeClient.InvokeJurassic2Async((Model.Jurassic2)_model, textPrompt, _modelConfigurator.GetJurassic2TextGenerationConfig());
        }
        else if (_model is Model.ClaudeTextCompletionSupport && !_messagesAPI)
        {
            response = await BedrockRuntimeClient.InvokeClaudeAsync((Model.Claude)_model, textPrompt, _modelConfigurator.GetClaudeTextGenerationConfig());
        }
        else if (_model is Model.Claude)
        {
            ClaudeMessage message = new ClaudeMessage() { Role = "user", Content = new[] { new ClaudeTextContent() { Text = textPrompt } } };
            response = await BedrockRuntimeClient.InvokeClaudeMessagesAsync((Model.Claude)_model, message, _modelConfigurator.GetClaudeMessagesConfig());
        }
        else if (_model is Model.CommandText)
        {
            response = await BedrockRuntimeClient.InvokeCommandV14Async((Model.CommandText)_model, textPrompt, _modelConfigurator.GetCommandTextGenerationConfig());
        }
        else if (_model is Model.Llama)
        {
            response = await BedrockRuntimeClient.InvokeLlamaAsync((Model.Llama)_model, textPrompt, _modelConfigurator.GetLlamaTextGenerationConfig());
        }
        else if (_model is Model.Mistral)
        {
            response = await BedrockRuntimeClient.InvokeMistralAsync((Model.Mistral)_model, textPrompt, _modelConfigurator.GetMistralTextGenerationConfig());
        }
        return response?.GetResponse();
    }

    private async IAsyncEnumerable<string?> InvokeModelWithStreamingAsync(Prompt prompt)
    {
        string textPrompt = new StringBuilder().AppendJoin(' ', prompt.Select(x => x.Prompt)).ToString();
        if (_model is Model.TitanText)
        {
            await foreach (var chunk in BedrockRuntimeClient.InvokeTitanTextG1WithResponseStreamAsync((Model.TitanText)_model, textPrompt, _modelConfigurator.GetTitanTextGenerationConfig()))
            {
                yield return chunk.GetResponse();
            }
        }
        else if (_model is Model.ClaudeTextCompletionSupport && !_messagesAPI)
        {
            await foreach (var chunk in BedrockRuntimeClient.InvokeClaudeWithResponseStreamAsync((Model.Claude)_model, textPrompt, _modelConfigurator.GetClaudeTextGenerationConfig()))
            {
                yield return chunk.GetResponse();
            }
        }
        else if (_model is Model.Claude)
        {
            ClaudeMessage message = new ClaudeMessage() { Role = "user", Content = new[] { new ClaudeTextContent() { Text = textPrompt } } };
            await foreach (var chunk in BedrockRuntimeClient.InvokeClaudeMessagesWithResponseStreamAsync((Model.Claude)_model, message, _modelConfigurator.GetClaudeMessagesConfig()))
            {
                yield return chunk.GetResponse();
            }
        }
        else if (_model is Model.CommandText)
        {
            await foreach (var chunk in BedrockRuntimeClient.InvokeCommandV14WithResponseStreamAsync((Model.CommandText)_model, textPrompt, _modelConfigurator.GetCommandTextGenerationConfig()))
            {
                yield return chunk.GetResponse();
            }
        }
        else if (_model is Model.Llama)
        {
            await foreach (var chunk in BedrockRuntimeClient.InvokeLlamaWithResponseStreamAsync((Model.Llama)_model, textPrompt, _modelConfigurator.GetLlamaTextGenerationConfig()))
            {
                yield return chunk.GetResponse();
            }
        }
        else if (_model is Model.Mistral)
        {
            await foreach (var chunk in BedrockRuntimeClient.InvokeMistralWithResponseStreamAsync((Model.Mistral)_model, textPrompt, _modelConfigurator.GetMistralTextGenerationConfig()))
            {
                yield return chunk.GetResponse();
            }
        }
    }
}

